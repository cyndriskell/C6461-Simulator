public class C6461SimulatorOpcodes {
	public static final short HLT   =  (short)0b000000; // Halt
        public static final short LDR   =  (short)0b000001; // Load Register
        public static final short STR   =  (short)0b000010; // Store Register
        public static final short LDA   =  (short)0b000011; // Load Address
        public static final short LDX   =  (short)0b100001; // Load Index Register
        public static final short STX   =  (short)0b100010; // Store Index Register
        public static final short JZ    =  (short)0b001000; // Jump If Zero
        public static final short JNE   =  (short)0b001001; // Jump If Not Equal
        public static final short JCC   =  (short)0b001010; // Jump If Condition Code
        public static final short JMA   =  (short)0b001011; // Unconditional Jump
        public static final short JSR   =  (short)0b001100; // Jump To Subroutine
        public static final short RFS   =  (short)0b001101; // Return From Subroutine
        public static final short SOB   =  (short)0b001110; // Subtract One And Branch
        public static final short JGE   =  (short)0b001111; // Jump Greater Then or Equal To
        public static final short AMR   =  (short)0b000100; // Add Memory To Register
        public static final short SMR   =  (short)0b000101; // Subtract Memory From Register
        public static final short AIR   =  (short)0b000110; // Add Immediate To Register
        public static final short SIR   =  (short)0b000111; // Subtract Immediate From Register
        public static final short MLT   =  (short)0b111000; // Multiply Register by Register
        public static final short DVD   =  (short)0b111001; // Divide Register by Register
        public static final short TRR   =  (short)0b111010; // Test the Equality of Register and Register
        public static final short AND   =  (short)0b111011; // Logical And of Register and Register
        public static final short ORR   =  (short)0b111100; // Logical Or of Register and Register
        public static final short NOT   =  (short)0b111101; // Logical Not of Register To Register
        public static final short SRC   =  (short)0b011001; // Shift Register by Count
        public static final short RRC   =  (short)0b011010; // Rotate Register by Count
        public static final short IN    =  (short)0b110001; // Input Character To Register from Device
        public static final short OUT   =  (short)0b110010; // Output Character to Device from Register
        public static final short CHK   =  (short)0b110011; // Check Device Status to Register
        public static final short FADD  =  (short)0b011011; // Floating Add Memory To Register
        public static final short FSUB  =  (short)0b011100; // Floating Subtract Memory From Register
        public static final short VADD  =  (short)0b011101; // Vector Add
        public static final short VSUB  =  (short)0b011110; // Vector Subtract
        public static final short CNVRT =  (short)0b011111; // Convert to Fixed/FloatingPoint
        public static final short LDFR  =  (short)0b101000; // Load Floating Register From Memory
        public static final short STFR  =  (short)0b101001; // Store Floating Register To Memory
}
